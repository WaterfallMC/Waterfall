From 4cebe8a6762cd620c4be03285cac0e2f192d0da4 Mon Sep 17 00:00:00 2001
From: Janmm14 <gitconfig1@janmm14.de>
Date: Mon, 21 Jun 2021 21:22:39 +0200
Subject: [PATCH] Use suppliers instead of reflection for native impl
 generation.

Thanks for pointing it out @MrIvanPlays

diff --git a/native/src/main/java/net/md_5/bungee/jni/NativeCode.java b/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
index a6d7cfb5..50486d87 100644
--- a/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
+++ b/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
@@ -7,17 +7,20 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import net.md_5.bungee.jni.cipher.BungeeCipher;
+import java.util.function.Supplier; // Waterfall - Supplier Use suppliers instead of reflection for native impl generation.
 
 public final class NativeCode<T>
 {
 
     private final String name;
-    private final Class<? extends T> javaImpl;
-    private final Class<? extends T> nativeImpl;
+    // Waterfall start: Class -> Supplier - Use suppliers instead of reflection for native impl generation.
+    private final Supplier<? extends T> javaImpl;
+    private final Supplier<? extends T> nativeImpl;
+    // Waterfall end
     //
     private boolean loaded;
 
-    public NativeCode(String name, Class<? extends T> javaImpl, Class<? extends T> nativeImpl)
+    public NativeCode(String name, Supplier<? extends T> javaImpl, Supplier<? extends T> nativeImpl)
     {
         if ("Mac OS X".equals( System.getProperty( "os.name" ))) name = "osx-" + name; // Waterfall
         this.name = name;
@@ -27,13 +30,7 @@ public final class NativeCode<T>
 
     public T newInstance()
     {
-        try
-        {
-            return ( loaded ) ? nativeImpl.getDeclaredConstructor().newInstance() : javaImpl.getDeclaredConstructor().newInstance();
-        } catch ( ReflectiveOperationException ex )
-        {
-            throw new RuntimeException( "Error getting instance", ex );
-        }
+        return ( loaded ) ? nativeImpl.get() : javaImpl.get(); // Waterfall - no more reflection catch - Use suppliers instead of reflection for native impl generation.
     }
 
     public boolean load()
diff --git a/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java b/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
index d211cef6..d63c5ad4 100644
--- a/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
+++ b/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
@@ -25,9 +25,15 @@ public class JavaCipher implements BungeeCipher
         }
     }
 
-    public JavaCipher() throws GeneralSecurityException
+    public JavaCipher() // Waterfall - throws -> trycatch&rethrow - Use suppliers instead of reflection for native impl generation.
     {
-        this.cipher = Cipher.getInstance( "AES/CFB8/NoPadding" );
+        try
+        {
+            this.cipher = Cipher.getInstance( "AES/CFB8/NoPadding" );
+        } catch ( GeneralSecurityException ex )
+        {
+            throw new RuntimeException( ex );
+        }
     }
 
     @Override
diff --git a/native/src/test/java/net/md_5/bungee/NativeCipherTest.java b/native/src/test/java/net/md_5/bungee/NativeCipherTest.java
index 72b81ab8..7b6d34a3 100644
--- a/native/src/test/java/net/md_5/bungee/NativeCipherTest.java
+++ b/native/src/test/java/net/md_5/bungee/NativeCipherTest.java
@@ -26,7 +26,7 @@ public class NativeCipherTest
     private final SecretKey secret = new SecretKeySpec( new byte[ 16 ], "AES" );
     private static final int BENCHMARK_COUNT = 4096;
     //
-    private static final NativeCode<BungeeCipher> factory = new NativeCode<>( "native-cipher", JavaCipher.class, NativeCipher.class );
+    private static final NativeCode<BungeeCipher> factory = new NativeCode<>( "native-cipher", JavaCipher::new, NativeCipher::new ); // Waterfall - .class -> ::new - Use suppliers instead of reflection for native impl generation.
 
     @Test
     public void testNative() throws Exception
diff --git a/native/src/test/java/net/md_5/bungee/NativeZlibTest.java b/native/src/test/java/net/md_5/bungee/NativeZlibTest.java
index fde626b1..c9d0260f 100644
--- a/native/src/test/java/net/md_5/bungee/NativeZlibTest.java
+++ b/native/src/test/java/net/md_5/bungee/NativeZlibTest.java
@@ -15,7 +15,7 @@ import org.junit.Test;
 public class NativeZlibTest
 {
 
-    private final NativeCode<BungeeZlib> factory = new NativeCode<>( "native-compress", JavaZlib.class, NativeZlib.class );
+    private final NativeCode<BungeeZlib> factory = new NativeCode<>( "native-compress", JavaZlib::new, NativeZlib::new ); // Waterfall - .class -> ::new - Use suppliers instead of reflection for native impl generation.
 
     @Test
     public void doTest() throws DataFormatException
diff --git a/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java b/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java
index ff6bb8c1..7b1d8293 100644
--- a/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java
+++ b/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java
@@ -31,7 +31,7 @@ public class EncryptionUtil
     public static final KeyPair keys;
     @Getter
     private static final SecretKey secret = new SecretKeySpec( new byte[ 16 ], "AES" );
-    public static final NativeCode<BungeeCipher> nativeFactory = new NativeCode<>( "native-cipher", JavaCipher.class, NativeCipher.class );
+    public static final NativeCode<BungeeCipher> nativeFactory = new NativeCode<>( "native-cipher", JavaCipher::new, NativeCipher::new ); // Waterfall - .class -> ::new - Use suppliers instead of reflection for native impl generation.
 
     static
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java b/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java
index 1f2d5a70..25819d65 100644
--- a/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java
+++ b/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java
@@ -8,5 +8,5 @@ import net.md_5.bungee.jni.zlib.NativeZlib;
 public class CompressFactory
 {
 
-    public static final NativeCode<BungeeZlib> zlib = new NativeCode<>( "native-compress", JavaZlib.class, NativeZlib.class );
+    public static final NativeCode<BungeeZlib> zlib = new NativeCode<>( "native-compress", JavaZlib::new, NativeZlib::new ); // Waterfall - .class -> ::new - Use suppliers instead of reflection for native impl generation.
 }
-- 
2.32.0.windows.1

